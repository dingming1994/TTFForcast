using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.ServiceModel.Web;
using ATOMS.Models;
using ATOMS.Models.ClientDataManager;
using ATOMS.Models.OperationManagement;

namespace ATOMS.WebServices
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the interface name "IATOMSOperationManagement" in both code and config file together.
    [ServiceContract]
    public interface IATOMSOperationManagement
    {
        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "RefreshOperationData")]
        void RefreshOperationData(string date);

        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "GenerateClockTimeSimulationData")]
        void GenerateClockTimeSimulationData();

        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "GenerateScanDataForSimulation")]
        void GenerateScanDataForSimulation();

        [OperationContract]
        [WebInvoke(Method = "GET",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "ClientDataManagerData")]
        ClientDataManagerData GetClientDataManagerData();

        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "GetIncomingTrains")]
        List<IncomingTrain> GetIncomingTrains(int lineID, int stationID, string time, short nextXMin);

        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "GetReformationData")]
        ReformationUIData GetReformationData(int lineID);

        [OperationContract]
        [WebInvoke(Method = "GET",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "ActualWorkPieces")]
        List<DailyActualWorkPiece> GetActualWorkPieces();

        [OperationContract]
        [WebInvoke(Method = "DELETE",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "ActualWorkPiece")]
        void DeleteActualWorkPiece(int workPieceID);

        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "ActualWorkPiece")]
        int InsertActualWorkPiece(DailyActualWorkPiece workPiece);

        [OperationContract]
        [WebInvoke(Method = "GET",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "ActualWorkPiece/{workPieceID}")]
        DailyActualWorkPiece GetActualWorkPiece(string workPieceID);

        [OperationContract]
        [WebInvoke(Method = "GET",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "PlannedWorkPieces")]
        List<DailyPlannedWorkPiece> GetPlannedWorkPieces();

        [OperationContract]
        [WebInvoke(Method = "DELETE",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "PlannedWorkPiece")]
        void DeletePlannedWorkPiece(int workPieceID);

        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "PlannedWorkPiece")]
        DailyPlannedWorkPiece InsertPlannedWorkPiece(DailyPlannedWorkPiece workPiece);

        [OperationContract]
        [WebInvoke(Method = "GET",
            ResponseFormat = WebMessageFormat.Json,
            RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "PlannedWorkPiece/{workPieceID}")]
        DailyPlannedWorkPiece GetPlannedWorkPiece(string workPieceID);

        [OperationContract]
        [WebInvoke(Method = "GET",
            ResponseFormat = WebMessageFormat.Json,
             RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "PlannedWorkPieceByTC?trainCaptainId={trainCaptainId}")]
        List<DailyPlannedWorkPiece> GetPlannedWorkPiecesByTrainCaptain(string trainCaptainId);

        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
             RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "CallBack")]
        DailyPlannedWorkPiece CallBackTrainCaptain(int trainCaptainID, string remarks);

        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
             RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "AssignWorkPiece")]
        int AssignWorkPiece(int trainCapatainID, int workPieceID);

        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
             RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "Merge")]
        DailyPlannedWorkPiece MergeWorkPieces(int workPieceId1, int workPieceId2);

        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
             RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "SwapDuty")]
        void SwapDutyBetweenTrainCaptain(int trainCaptainId1, int trainCaptainId2);

        [OperationContract]
        [WebInvoke(Method = "GET",
            ResponseFormat = WebMessageFormat.Json,
             RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "SplitPoints?workPieceId={workPieceId}")]
        List<WorkPieceSplitPoint> GetWorkPieceSplitPoints(string workPieceId);

        [OperationContract]
        [WebInvoke(Method = "POST",
            ResponseFormat = WebMessageFormat.Json,
             RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
            UriTemplate = "SplitWorkPiece")]
        List<DailyPlannedWorkPiece> SplitWorkPiece(int workPieceID, short stationID, short platformID, string time);


<<<<<<< HEAD

        //Added by Suraj
=======
>>>>>>> 53ce402beb499e2fcc76e6ba2bb467ca15e4e27d
        [OperationContract]
        [WebInvoke(Method = "GET",
            ResponseFormat = WebMessageFormat.Json,
             RequestFormat = WebMessageFormat.Json,
            BodyStyle = WebMessageBodyStyle.WrappedRequest,
<<<<<<< HEAD
            UriTemplate = "TrainDeviation")]
        List<TrainDeviation> GetTrainDeviation();
=======
            UriTemplate = "GetAvailableTCs?platform={platform}&time={time}&trainno={trainNo}")]
        List<AvailableTC> GetAvailableTCs(string platform, string time, string trainNo);
>>>>>>> 53ce402beb499e2fcc76e6ba2bb467ca15e4e27d
    }

}
